<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planilha de Fluxo de Caixa</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .summary-card {
            transition: all 0.3s ease-in-out;
        }
        .delete-btn {
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
        }
        tr:hover .delete-btn {
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">

        <!-- Título -->
        <header class="mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Planilha de Fluxo de Caixa</h1>
            <p class="text-gray-500 mt-1">Gerencie suas finanças de forma simples e eficaz. Seus dados são salvos automaticamente no navegador.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

            <!-- Coluna da Esquerda: Formulários e Resumo -->
            <div class="lg:col-span-1 space-y-8">

                <!-- Card Saldo Inicial -->
                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <h2 class="text-xl font-semibold mb-4">1. Saldo Inicial</h2>
                    <label for="initial-balance" class="block text-sm font-medium text-gray-600 mb-2">Informe o saldo para começar</label>
                    <div class="relative">
                        <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">R$</span>
                        <input type="number" id="initial-balance" placeholder="0.00" class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                </div>

                <!-- Card Adicionar Lançamento -->
                <form id="transaction-form" class="bg-white p-6 rounded-xl shadow-sm border border-gray-200 space-y-4">
                    <h2 class="text-xl font-semibold">2. Adicionar Lançamento</h2>
                    
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-600 mb-1">Descrição</label>
                        <input type="text" id="description" placeholder="Ex: Venda do produto X" required class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>

                    <div>
                        <label for="amount" class="block text-sm font-medium text-gray-600 mb-1">Valor</label>
                         <div class="relative">
                            <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">R$</span>
                            <input type="number" id="amount" step="0.01" placeholder="150.50" required class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                    </div>

                     <div>
                        <label for="date" class="block text-sm font-medium text-gray-600 mb-1">Data</p>
                        <input type="date" id="date" required class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>

                    <div>
                        <label for="type" class="block text-sm font-medium text-gray-600 mb-1">Tipo</label>
                        <select id="type" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition bg-white">
                            <option value="entrada" class="text-green-600 font-medium">Entrada</option>
                            <option value="saida" class="text-red-600 font-medium">Saída</option>
                        </select>
                    </div>

                    <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition transform hover:scale-105">
                        Adicionar
                    </button>
                </form>

                <!-- Card Resumo Financeiro -->
                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200 space-y-4">
                    <h2 class="text-xl font-semibold mb-4">3. Resumo Financeiro</h2>
                    <div class="flex justify-between items-center p-4 bg-gray-50 rounded-lg summary-card">
                        <span class="font-medium">Saldo Inicial</span>
                        <span id="summary-initial" class="font-bold text-lg">R$ 0,00</span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-green-50 rounded-lg summary-card">
                        <span class="font-medium text-green-800">Total de Entradas</span>
                        <span id="summary-incomes" class="font-bold text-lg text-green-600">R$ 0,00</span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-red-50 rounded-lg summary-card">
                        <span class="font-medium text-red-800">Total de Saídas</span>
                        <span id="summary-outcomes" class="font-bold text-lg text-red-600">R$ 0,00</span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-blue-50 rounded-lg summary-card mt-4 border-t-2 border-blue-200">
                        <span class="font-semibold text-blue-800 text-lg">Saldo Final</span>
                        <span id="summary-final" class="font-bold text-xl text-blue-600">R$ 0,00</span>
                    </div>
                </div>
                 <!-- Card Limpar Dados -->
                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <h2 class="text-xl font-semibold mb-4">Opções</h2>
                    <button id="clear-data" class="w-full bg-red-600 text-white font-semibold py-3 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">
                        Limpar Todos os Dados
                    </button>
                    <p class="text-xs text-gray-500 mt-2 text-center">Atenção: esta ação é irreversível.</p>
                </div>
            </div>

            <!-- Coluna da Direita: Tabela de Lançamentos -->
            <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                <h2 class="text-xl font-semibold mb-4">Histórico de Lançamentos</h2>
                <div class="overflow-x-auto">
                    <table class="w-full text-left">
                        <thead class="border-b-2 border-gray-200">
                            <tr>
                                <th class="p-3 text-sm font-semibold tracking-wide">Data</th>
                                <th class="p-3 text-sm font-semibold tracking-wide">Descrição</th>
                                <th class="p-3 text-sm font-semibold tracking-wide text-right">Valor</th>
                                <th class="p-3 text-sm font-semibold tracking-wide text-center">Ação</th>
                            </tr>
                        </thead>
                        <tbody id="transactions-table-body" class="divide-y divide-gray-100">
                           <!-- Linhas da tabela serão inseridas aqui pelo JS -->
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>

    <script>
        // Chaves para o localStorage, para evitar conflitos com versões antigas
        const TRANSACTIONS_KEY = 'cashflow_transactions_v2';
        const INITIAL_BALANCE_KEY = 'cashflow_initialBalance_v2';

        // --- ELEMENTOS DO DOM ---
        const initialBalanceInput = document.getElementById('initial-balance');
        const transactionForm = document.getElementById('transaction-form');
        const descriptionInput = document.getElementById('description');
        const amountInput = document.getElementById('amount');
        const dateInput = document.getElementById('date');
        const typeInput = document.getElementById('type');
        const transactionsTableBody = document.getElementById('transactions-table-body');
        const clearDataButton = document.getElementById('clear-data');
        
        const summaryInitial = document.getElementById('summary-initial');
        const summaryIncomes = document.getElementById('summary-incomes');
        const summaryOutcomes = document.getElementById('summary-outcomes');
        const summaryFinal = document.getElementById('summary-final');

        // --- ESTADO DA APLICAÇÃO ---
        let transactions = [];

        // --- FUNÇÕES DE DADOS ---

        const saveState = () => {
            localStorage.setItem(TRANSACTIONS_KEY, JSON.stringify(transactions));
            localStorage.setItem(INITIAL_BALANCE_KEY, initialBalanceInput.value);
        };

        const loadState = () => {
            const savedTransactions = localStorage.getItem(TRANSACTIONS_KEY);
            const savedInitialBalance = localStorage.getItem(INITIAL_BALANCE_KEY);

            transactions = savedTransactions ? JSON.parse(savedTransactions) : [];
            initialBalanceInput.value = savedInitialBalance || '';
        };

        // --- FUNÇÕES DE RENDERIZAÇÃO E FORMATAÇÃO ---

        const formatCurrency = (value) => {
            const number = parseFloat(value) || 0;
            return number.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        };
        
        const updateSummary = () => {
            const initialBalance = parseFloat(initialBalanceInput.value) || 0;
            const totalIncomes = transactions.filter(t => t.type === 'entrada').reduce((sum, t) => sum + t.amount, 0);
            const totalOutcomes = transactions.filter(t => t.type === 'saida').reduce((sum, t) => sum + t.amount, 0);
            const finalBalance = initialBalance + totalIncomes - totalOutcomes;

            summaryInitial.textContent = formatCurrency(initialBalance);
            summaryIncomes.textContent = formatCurrency(totalIncomes);
            summaryOutcomes.textContent = formatCurrency(totalOutcomes);
            summaryFinal.textContent = formatCurrency(finalBalance);

            summaryFinal.classList.remove('text-red-600', 'text-blue-600');
            summaryFinal.classList.add(finalBalance < 0 ? 'text-red-600' : 'text-blue-600');
        };

        const renderTransactions = () => {
            transactionsTableBody.innerHTML = ''; 

            if (transactions.length === 0) {
                 transactionsTableBody.innerHTML = `
                    <tr>
                        <td colspan="4" class="p-8 text-center text-gray-500">
                            Nenhum lançamento adicionado ainda.
                        </td>
                   </tr>`;
                 return;
            }

            const sortedTransactions = [...transactions].sort((a, b) => new Date(b.date) - new Date(a.date));

            sortedTransactions.forEach(t => {
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-50';

                const valueColor = t.type === 'entrada' ? 'text-green-600' : 'text-red-600';
                const sign = t.type === 'entrada' ? '+' : '-';

                const [year, month, day] = t.date.split('-');
                const formattedDate = `${day}/${month}/${year}`;

                tr.innerHTML = `
                    <td class="p-3 text-sm text-gray-600">${formattedDate}</td>
                    <td class="p-3 text-gray-800 font-medium">${t.description}</td>
                    <td class="p-3 font-bold text-right ${valueColor}">${sign} ${formatCurrency(t.amount)}</td>
                    <td class="p-3 text-center">
                        <button onclick="deleteTransaction(${t.id})" class="delete-btn text-gray-400 hover:text-red-500 p-1" title="Excluir lançamento">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                        </button>
                    </td>
                `;
                transactionsTableBody.appendChild(tr);
            });
        };

        // --- FUNÇÕES DE MANIPULAÇÃO DE EVENTOS ---

        const handleAddTransaction = (event) => {
            event.preventDefault();

            const description = descriptionInput.value.trim();
            const amount = parseFloat(amountInput.value);
            const date = dateInput.value;
            const type = typeInput.value;

            if (!description || isNaN(amount) || amount <= 0 || !date) {
                // Poderia adicionar um feedback visual aqui, mas por ora só evita o envio
                return;
            }

            transactions.push({ id: Date.now(), description, amount, date, type });
            
            transactionForm.reset();
            dateInput.value = new Date().toISOString().split('T')[0];

            renderTransactions();
            updateSummary();
            saveState();
        };

        const handleBalanceChange = () => {
            updateSummary();
            saveState();
        }
        
        window.deleteTransaction = (id) => {
            transactions = transactions.filter(t => t.id !== id);
            renderTransactions();
            updateSummary();
            saveState();
        };

        const clearAllData = () => {
            localStorage.removeItem(TRANSACTIONS_KEY);
            localStorage.removeItem(INITIAL_BALANCE_KEY);
            
            transactions = [];
            initialBalanceInput.value = '';
            
            renderTransactions();
            updateSummary();
        };


        // --- INICIALIZAÇÃO ---
        const initializeApp = () => {
            loadState();
            dateInput.value = new Date().toISOString().split('T')[0];
            renderTransactions();
            updateSummary();
            
            initialBalanceInput.addEventListener('input', handleBalanceChange);
            transactionForm.addEventListener('submit', handleAddTransaction);
            clearDataButton.addEventListener('click', clearAllData);
        };

        initializeApp();

    </script>

</body>
</html>